<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo使用教程</title>
      <link href="/2023/07/02/hexo-use/"/>
      <url>/2023/07/02/hexo-use/</url>
      
        <content type="html"><![CDATA[<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>此文将告诉你如何快速上手hexo</p><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/v2-7827197bfa0023932d428633d41372fd_250x0.jpg"></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生产静态页面"><a href="#生产静态页面" class="headerlink" title="生产静态页面"></a>生产静态页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2023/07/02/binary-tree/"/>
      <url>/2023/07/02/binary-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树介绍"><a href="#二叉树介绍" class="headerlink" title="二叉树介绍"></a>二叉树介绍</h2><p>二叉树是n(n&gt;&#x3D;0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树组成。</p><p>下图展示了一棵普通二叉树<br><img src="http://rx4hz3911.hd-bkt.clouddn.com/2-1Q226195949495.gif"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line">public class BinaryTree&lt;T&gt; &#123;</span><br><span class="line">    private final TreeNode&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    private Integer HEIGHT;</span><br><span class="line"></span><br><span class="line">    private Integer MAXBRANCH;</span><br><span class="line"></span><br><span class="line">    public BinaryTree(T[] arr) &#123;</span><br><span class="line">        MAXBRANCH = 0;</span><br><span class="line">        root = buildTree(Arrays.stream(arr).iterator());</span><br><span class="line">        MAXBRANCH = MAXBRANCH % 2 == 0 ? MAXBRANCH : MAXBRANCH + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BinaryTree(TreeNode&lt;T&gt; root) &#123;</span><br><span class="line">        this.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TreeNode&lt;T&gt; getRoot() &#123;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;T&gt; preTraverse() &#123;</span><br><span class="line">        List&lt;T&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayDeque&lt;TreeNode&lt;T&gt;&gt; stack = new ArrayDeque&lt;&gt;();</span><br><span class="line">        TreeNode&lt;T&gt; ptr = root;</span><br><span class="line">        while (!stack.isEmpty() || ptr != null) &#123;</span><br><span class="line">            if (ptr != null) &#123;</span><br><span class="line">                list.add(ptr.val);</span><br><span class="line">                stack.push(ptr);</span><br><span class="line">                ptr = ptr.left;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ptr = stack.pop();</span><br><span class="line">                ptr = ptr.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;T&gt; midTraverse() &#123;</span><br><span class="line">        List&lt;T&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayDeque&lt;TreeNode&lt;T&gt;&gt; stack = new ArrayDeque&lt;&gt;();</span><br><span class="line">        TreeNode&lt;T&gt; ptr = root;</span><br><span class="line">        while (!stack.isEmpty() || ptr != null) &#123;</span><br><span class="line">            if (ptr != null) &#123;</span><br><span class="line">                stack.push(ptr);</span><br><span class="line">                ptr = ptr.left;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ptr = stack.pop();</span><br><span class="line">                list.add(ptr.val);</span><br><span class="line">                ptr = ptr.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;T&gt; postTraverse() &#123;</span><br><span class="line">        List&lt;T&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayDeque&lt;TreeNode&lt;T&gt;&gt; stack = new ArrayDeque&lt;&gt;();</span><br><span class="line">        TreeNode&lt;T&gt; ptr = root;</span><br><span class="line">        TreeNode&lt;T&gt; pre = null;</span><br><span class="line">        while (!stack.isEmpty() || ptr != null) &#123;</span><br><span class="line">            if (ptr != null) &#123;</span><br><span class="line">                if (ptr.right == pre || ptr.left == pre &amp;&amp; ptr.right == null) &#123;</span><br><span class="line">                    //完全访问，出栈</span><br><span class="line">                    pre = stack.pop();</span><br><span class="line">                    ptr = stack.peek();</span><br><span class="line">                    list.add(pre.val);</span><br><span class="line">                &#125; else if (!stack.isEmpty() &amp;&amp; ptr.left == pre) &#123;</span><br><span class="line">                    //左子树完全访问</span><br><span class="line">                    pre = ptr;</span><br><span class="line">                    ptr = stack.peek().right;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    pre = ptr;</span><br><span class="line">                    ptr = ptr.left;</span><br><span class="line">                    stack.push(pre);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ptr = stack.peek();</span><br><span class="line">                pre = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getHeight() &#123;</span><br><span class="line">        if (HEIGHT == null) &#123;</span><br><span class="line">            HEIGHT = getHeight(root);</span><br><span class="line">        &#125;</span><br><span class="line">        return HEIGHT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        //枝距离</span><br><span class="line">        int width = (int) Math.pow(2, getHeight() - 1) * getMaxBranch();</span><br><span class="line">        //所需空行</span><br><span class="line">        int block = ((int) Math.pow(2, getHeight()) - 1) * getMaxBranch();</span><br><span class="line">        int layer = 0;</span><br><span class="line">        StringBuilder builder = new StringBuilder();</span><br><span class="line">        ArrayDeque&lt;TreeNode&lt;T&gt;&gt; printQueue = new ArrayDeque&lt;&gt;();</span><br><span class="line">        ArrayDeque&lt;TreeNode&lt;T&gt;&gt; branchQueue = new ArrayDeque&lt;&gt;();</span><br><span class="line">        if (root != null) &#123;</span><br><span class="line">            printQueue.offer(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while (layer &lt; getHeight()) &#123;</span><br><span class="line">            builder.append(&quot; &quot;.repeat(block));</span><br><span class="line">            int size = printQueue.size();</span><br><span class="line">            for (int i = 0; i &lt; size; i += 1) &#123;</span><br><span class="line">                TreeNode&lt;T&gt; node = printQueue.poll();</span><br><span class="line">                if (node != null &amp;&amp; node.val != null) &#123;</span><br><span class="line">                    builder.append(node.val);</span><br><span class="line">                    branchQueue.offer(Objects.requireNonNullElseGet(node.left, TreeNode::nullNode));</span><br><span class="line">                    branchQueue.offer(Objects.requireNonNullElseGet(node.right, TreeNode::nullNode));</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    branchQueue.offer(TreeNode.nullNode());</span><br><span class="line">                    branchQueue.offer(TreeNode.nullNode());</span><br><span class="line">                &#125;</span><br><span class="line">                builder.append(&quot; &quot;.repeat(width * 4 - (node == null || node.val == null ? 0 : node.val.toString().length())));</span><br><span class="line">            &#125;</span><br><span class="line">            if (block &gt;= width) &#123;</span><br><span class="line">                size = branchQueue.size();</span><br><span class="line">                block -= width;</span><br><span class="line">                builder.append(&#x27;\n&#x27;);</span><br><span class="line">                builder.append(&quot; &quot;.repeat(block));</span><br><span class="line">                for (int i = 0; i &lt; size; i += 2) &#123;</span><br><span class="line">                    TreeNode&lt;T&gt; leftNode = branchQueue.poll();</span><br><span class="line">                    TreeNode&lt;T&gt; rightNode = branchQueue.poll();</span><br><span class="line">                    boolean flag1 = leftNode != null &amp;&amp; leftNode.val != null;</span><br><span class="line">                    boolean flag2 = rightNode != null &amp;&amp; rightNode.val != null;</span><br><span class="line">                    if (flag1) &#123;</span><br><span class="line">                        builder.append(&#x27;+&#x27;);</span><br><span class="line">                        builder.append(&quot;-&quot;.repeat(width - 1));</span><br><span class="line">                        printQueue.offer(leftNode);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        builder.append(&quot; &quot;.repeat(width));</span><br><span class="line">                        printQueue.offer(TreeNode.nullNode());</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (flag1 || flag2) &#123;</span><br><span class="line">                        builder.append(&#x27;+&#x27;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        builder.append(&#x27; &#x27;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (flag2) &#123;</span><br><span class="line">                        builder.append(&quot;-&quot;.repeat(width - 1));</span><br><span class="line">                        builder.append(&#x27;+&#x27;);</span><br><span class="line">                        printQueue.offer(rightNode);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        builder.append(&quot; &quot;.repeat(width));</span><br><span class="line">                        printQueue.offer(TreeNode.nullNode());</span><br><span class="line">                    &#125;</span><br><span class="line">                    builder.append(&quot; &quot;.repeat(width * 2 - 1));</span><br><span class="line">                &#125;</span><br><span class="line">                builder.append(&#x27;\n&#x27;);</span><br><span class="line">                width = width / 2;</span><br><span class="line">            &#125;</span><br><span class="line">            layer++;</span><br><span class="line">        &#125;</span><br><span class="line">        return builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getMaxBranch() &#123;</span><br><span class="line">        if (MAXBRANCH == null) &#123;</span><br><span class="line">            MAXBRANCH = getMaxBranch(root);</span><br><span class="line">        &#125;</span><br><span class="line">        MAXBRANCH = MAXBRANCH % 2 == 0 ? MAXBRANCH : MAXBRANCH + 1;</span><br><span class="line">        return MAXBRANCH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private TreeNode&lt;T&gt; buildTree(Iterator&lt;T&gt; iterator) &#123;</span><br><span class="line">        if (iterator.hasNext()) &#123;</span><br><span class="line">            T value = iterator.next();</span><br><span class="line">            if (value == null) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode&lt;T&gt; node = new TreeNode&lt;&gt;();</span><br><span class="line">            node.val = value;</span><br><span class="line">            MAXBRANCH = Math.max(MAXBRANCH, value.toString().length());</span><br><span class="line">            node.left = buildTree(iterator);</span><br><span class="line">            node.right = buildTree(iterator);</span><br><span class="line">            return node;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RuntimeException(&quot;wrong build&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getMaxBranch(TreeNode&lt;T&gt; node) &#123;</span><br><span class="line">        if (node == null) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return Math.max(node.val.toString().length(), Math.max(getMaxBranch(node.left), getMaxBranch(node.right)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getHeight(TreeNode&lt;T&gt; node) &#123;</span><br><span class="line">        if (node == null) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return Math.max(getHeight(node.left), getHeight(node.right)) + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华师大数据学院夏令营项目总结</title>
      <link href="/2023/07/02/dase-work-concluaion/"/>
      <url>/2023/07/02/dase-work-concluaion/</url>
      
        <content type="html"><![CDATA[<h2 id="博客主题及其选取原因"><a href="#博客主题及其选取原因" class="headerlink" title="博客主题及其选取原因"></a>博客主题及其选取原因</h2><h3 id="为什么选择hexo框架？"><a href="#为什么选择hexo框架？" class="headerlink" title="为什么选择hexo框架？"></a>为什么选择hexo框架？</h3><p>选取hexo作为博客框架的原因之一是因为我本身对node.js有一定了解，也有基于javascript的网页开发经验，对于初接触静态博客来说，hexo是最适合我的了。且hexo也有许多漂亮的主题可供选择，使用命令安装插件也较为容易。</p><h3 id="为什么选择matery主题"><a href="#为什么选择matery主题" class="headerlink" title="为什么选择matery主题"></a>为什么选择matery主题</h3><p>我在hexo官方提供的多个主题中选择了matery(注：之前尝试了几种不同的主题，但是要么是界面过于简略，要么是安装时出现依赖问题，所以也花了不少时间)，事实证明我选对了，这是我体验下来最不错的主题，我也想推荐给大家使用。</p><p>matery主题集成了静态博客里主流的功能，配置灵活，有些相同的功能也提供了多种方案可供选择。该主题灵活的交互动画也确实让其增加了不少</p><p>作者在主题目录下的<code>_config.yml</code>的每一个配置项上都注释标明了相应，甚至对部分功能的配置提供了一些建议，这让我在后续博客功能的添加和修改上确实省下了不少力气。整个主题没有什么硬编码的部分，功能的配置几乎完全集成在<code>_config.yml</code>中，当然，<code>_config.yml</code>中还可以自己配置需要运行的js脚本，如果想修改外观，主题中还提供了可供自己修改的css文件，这样高灵活度的主题对于想要各种尝试的人确实非常合适。</p><h2 id="博客页面布局及其设计思路"><a href="#博客页面布局及其设计思路" class="headerlink" title="博客页面布局及其设计思路"></a>博客页面布局及其设计思路</h2><p>博客大致分为五个模块，包括首页，标签，分类，归档，关于五个部分。</p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>巨幕，包含名言和个人的联系方式，下拉后可以看到文章</p><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/image-20230702202757433.png"></p><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/image-20230702204734571.png"></p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>可视化展示当前博客的标签数</p><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/image-20230702205624164.png"></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>可视化展示当前博客的类数</p><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/image-20230702205723269.png"></p><h3 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h3><p>以时间线和日历展示文章</p><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/image-20230702205813779.png"></p><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>展示自己，以及文章统计</p><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/image-20230702210058003.png"></p><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>音乐播放（左下角），搜索（右上角），留言板（右下角）</p><h2 id="博客功能实现及其技术选择"><a href="#博客功能实现及其技术选择" class="headerlink" title="博客功能实现及其技术选择"></a>博客功能实现及其技术选择</h2><h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p>搜索功能安装hexo官方插件<code>hexo-generator-search</code>，并在<code>_config.yml</code>文件中进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure><h3 id="留言板功能"><a href="#留言板功能" class="headerlink" title="留言板功能"></a>留言板功能</h3><p>留言板使用DaoVoice插件（官网：<a href="http://dashboard.daovoice.io)/">http://dashboard.daovoice.io）</a></p><p>这需要在其官网注册一个账号并获取app_id，在<code>_config.yml</code>文件中进行配置。</p><h3 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h3><p>字数统计使用的是官方插件<code>hexo-wordcount</code>，浏览人数使用的是busuanzi插件（官网：<a href="http://ibruce.info/2015/04/04/busuanzi/%EF%BC%89">http://ibruce.info/2015/04/04/busuanzi/）</a></p><h3 id="博客制作过程中遇到的问题及其解决方法"><a href="#博客制作过程中遇到的问题及其解决方法" class="headerlink" title="博客制作过程中遇到的问题及其解决方法"></a>博客制作过程中遇到的问题及其解决方法</h3><p>在完成这个项目时遇到的问题并不是很多。一个问题是在编写markdown文章时难免会出现插入大量图片的情况，每次插入都需要去关心图片的地址会非常麻烦，使用图床时还需要上传。这里的解决方案是下载PicGo自动化工具和markdown编辑器Typora。Typora能够配置图片插入时的动作，搭配PicGo可以在插入时自动上传到图床且插入正确的图片地址。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>之前就看到网上的各个程序员大佬都有自己的博客，但是之前也没有去了解怎么实现的。也很感谢夏令营的这次机会让我搭建了一个个人博客，这对我来说是一个契机。这次项目也让我感受到了开源的魅力，如果没有这些有用的开源插件以及GitHub的相关工具，恐怕很难做到这个效果吧。</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepLabV3神经网络实战-苹果图片的区域分割</title>
      <link href="/2023/07/02/deeplabv3-share/"/>
      <url>/2023/07/02/deeplabv3-share/</url>
      
        <content type="html"><![CDATA[<h2 id="DeepLabV3神经网络介绍"><a href="#DeepLabV3神经网络介绍" class="headerlink" title="DeepLabV3神经网络介绍"></a>DeepLabV3神经网络介绍</h2><p>该网络是于2018年提出的语义分割模型，以deeplabv3为encoder为架构，在此基础上加入了Decoder模块细化分割结果。并将Depthwise separable convolution在ASPP和Decoder上的应用。</p><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/e3896d4867794435be4c037a46d2b152.png"></p><p><strong>Encoder：</strong><br>首先图片进入Encoder里面进行特征提取，经过DCNN（深度卷积神经网络）生成两个有效特征层，分别为浅层特征层和深层特征层，浅层特征层的高和宽会大一些，而深层特征层的下采样会多一些，所以高和宽会小一些。在Encoder中，我们会使用不同膨胀率的膨胀卷积进行特征提取，其中有膨胀率分别为6,12,18的3x3卷积，用来提高网络的感受野，使得网络有不同的特征感受情况，之后将特征层进行堆叠，再经过1x1卷积进行通道数调整，获得绿色特征层。</p><p><strong>Decoder:</strong><br> 由DCNN生成的浅层特征层进入到Decoder解码器中，由编码器生成的具有高语义信息的绿色特征层进入到Decoder中进行上采样，之后与较浅的特征经过1x1卷积得到的结果进行特征融合，之后经过3x3的卷积进行特征提取，最终经过上采样将输出图片与输入图片大小一致，得到预测结果。</p><h2 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h2><blockquote><p>之前所做的项目需要分割出苹果健康的区域，损坏的区域，以及背景，以便后续的图像处理操作，采用了该模型进行语义分割处理。<br>本项目数据集来自kaggle <a href="https://www.kaggle.com/datasets/sergeynesteruk/apple-rotting-segmentation-problem-in-the-wild">https://www.kaggle.com/datasets/sergeynesteruk/apple-rotting-segmentation-problem-in-the-wild</a></p></blockquote><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><h4 id="训练参数"><a href="#训练参数" class="headerlink" title="训练参数"></a>训练参数</h4><table><thead><tr><th></th><th>描述</th></tr></thead><tbody><tr><td>所选模型</td><td>deeplabv3_resnet101模型</td></tr><tr><td>epoch</td><td>60</td></tr><tr><td>batch</td><td>8</td></tr><tr><td>图像增强</td><td>0.5概率随机剪裁，0.5概率双线性插值缩放</td></tr><tr><td>learn_rate</td><td>0.0003</td></tr></tbody></table><h4 id="训练曲线"><a href="#训练曲线" class="headerlink" title="训练曲线"></a>训练曲线</h4><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/img.png"><br><img src="http://rx4hz3911.hd-bkt.clouddn.com/img_1.png"></p><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>采用平均交并比评价训练结果，其中miou:86.11584745762715,结果较好</p><blockquote><p>黑色部分为背景，绿色部分为健康区域，红部分为腐败破损区域<br>第一行为原图，第二行为目标图，第三行为预测图</p></blockquote><p><img src="http://rx4hz3911.hd-bkt.clouddn.com/img_3.png"><br><img src="http://rx4hz3911.hd-bkt.clouddn.com/img_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 语义分割 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
